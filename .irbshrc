require 'FileUtils'
require 'Open3'

ENV['path'] = runtime("bin/#{RUBY_PLATFORM}/bin") + ";" + ENV['path']

unless MYOPT[:silent]
  puts "irbshell"
  puts Time.now
end

SHELLCOMMANDS = load_data(runtime("shell")) rescue []
OPTIONS = load_data(runtime("options")) rescue {}


def save_shell_commands
  save_data SHELLCOMMANDS, runtime("shell")
end

cmd /^!(.*)/ do |k|
  system($ARG[1])
  true
end

cmd /^cd\s+\"(.*)\"/ do |k|
  k = $ARG[1]
  Dir.chdir k
  set_prompt
  true
end

cmd /^cd\s+(.*)/ do |k|
  k = $ARG[1]
  Dir.chdir k
  set_prompt
  true
end

cmd /^\+sh\s+(.*)/ do |k|
  SHELLCOMMANDS.push $ARG[1]
  save_shell_commands
  true
end

cmd /^\-sh\s+(.*)/ do |k|
  SHELLCOMMANDS.delete $ARG[1]
  save_shell_commands
  true
end

cmd /^(\S+)(\s+(.+))?/ do |k|
  if $ARG[1] != nil && SHELLCOMMANDS.index($ARG[1])
     system("#{$ARG[1]} #{$ARG[2]}")
     true
  else
     false
  end
end

cmd /^\+(\S+)\s+(.*)/ do |k|
  OPTIONS[$ARG[1]]=$ARG[2]
  save_data OPTIONS, runtime("options")
  true
end

cmd /^\-(\S+)/ do |k|
  OPTIONS.delete $ARG[1]
  save_data OPTIONS, runtime("options")
  true
end

cmd /^make$/ do |k|
  make = OPTIONS["makeprg"] || "make"
  system(make)
  true
end


def overwrite_prompt(file)
  if FileTest.file?(file)
   while true
    print "File #{file} exists, overwrite?"
    x = gets
    return true if x[/^[Yy]/]
    return false if x[/^[Nn]/]
   end
 elsif FileTest.directory?(file)
   while true
    print "Directory #{file} exists, overwrite?"
    x = gets
    return true if x[/^[Yy]/]
    return false if x[/^[Nn]/]
   end
  end
  true
end


def mk(oldname, newname)
    if FileTest.file?(File.join(oldname, "setup.rb"))
       eval File.join(oldname, "setup.rb") + " " + newname
    else
       FileUtils.copy_entry(oldname, newname, false, false, true)
    end
    puts "#{newname} created from #{oldname}"
end

cmd /^mk (\S+)\s+(\S+)/ do
  templ, newname = $ARG[1], $ARG[2]
  templ_entity = runtime("templates/#{templ}")
  if overwrite_prompt(newname)
    mk(templ_entity, newname)
  end
  true
end

cmd /^mk! (\S+)\s+(\S+)/ do
  templ, newname = $ARG[1], $ARG[2]
  templ_entity = runtime("templates/#{templ}")
  mk(templ_entity, newname)
  true
end


def do_shell(name, args)
 x = open(name, "r"){|f| f.readline.chomp}
 if (x.index("#!irbshell")!=0) && x[0,2] == "#!"
     k = x[2..-1]
     eval("#{k} #{name} #{args}")
     k
 elsif x == "#!irbshell"
   system("ruby #{runtime(IREPLNAME)} -s #{name} #{args}")
   "#!irbshell"
 elsif x == "#!irbshell here"
   io = IO.popen("ruby #{runtime(IREPLNAME)} #{name} #{args}", "w")
   io.write File.read(name)
   io.write "\n"
   begin
     loop do
       io.write (x = STDIN.gets) + "\n"
       break if x[/^exit\b/]
     end
   rescue Object
   end
   "#!irbshell here"
 else
  false
 end
end

cmd /^(\S+)(\s+(.+))?/ do |k|
  name = current_or_runtime($ARG[1])
  args = $ARG[2]
  if FileTest.exists?(name)
    do_shell(name, args)
  else
    false
  end
end

cmd /^exit\b/ do |k|
  exit
end

cmd /^http(s?)\:\/\// do |k|
  system("start #{k}")
end

